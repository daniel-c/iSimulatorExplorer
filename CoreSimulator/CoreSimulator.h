//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//
// Modified by Daniel Cerutti to add type informations
//

#pragma mark Forwared declaration

#import "xpc/xpc.h"

@protocol SimBridge;
@class SimDeviceSet;
@class SimDeviceType;
@class SimRuntime;
@class SimServiceConnectionManager;

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Library/PrivateFrameworks/CoreSimulator.framework/Versions/A/CoreSimulator
// UUID: AF36FAD0-8BC9-3626-BAE9-4E315D373AA4
//
//                           Arch: x86_64
//                Current version: 110.4.0
//          Compatibility version: 1.0.0
//                 Source version: 110.4.0.0.0
//       Minimum Mac OS X version: 10.9.0
//                    SDK version: 10.9.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol SimDeviceNotifier
- (BOOL)unregisterNotificationHandler:(unsigned long long)handler error:(NSError **)error;
//- (unsigned long long)registerNotificationHandlerOnQueue:(NSObject<OS_dispatch_queue> *)queue handler:(void (^)(NSDictionary *))handlerBlock;
- (unsigned long long)registerNotificationHandler:(void (^)(NSDictionary *))handlerBlock;
@end

@interface SimDeviceNotificationManager : NSObject <SimDeviceNotifier>

//@property(retain) NSObject<OS_dispatch_queue> *sendQueue;
@property unsigned long long next_regID;
@property(retain) NSMutableDictionary *handlers;
//@property(retain) NSObject<OS_dispatch_queue> *handlersQueue;

- (void)sendNotification:(id)arg1;
- (id)init;

@end

@interface SimVerifier : NSObject

+ (id)verificationError:(int)arg1;
+ (id)connectionError;
+ (id)sharedVerifier;

//@property(retain) NSObject<OS_dispatch_queue *> *serviceConnectionQueue;
@property(retain) NSObject<OS_xpc_object> *serviceConnection;
- (id)verifyDyldSim:(id)arg1;
- (id)verifyAll;
- (BOOL)verifyAllWithError:(id *)arg1;

- (id)init;

@end

@interface SimServiceConnectionManager : NSObject

+ (void)useService:(BOOL)arg1;
+ (id)sharedConnectionManager;

@property(retain) NSDate *lastConnectionTime;
//@property(retain) NSObject<OS_dispatch_queue> *serviceConnectionQueue;
@property(retain) NSObject<OS_xpc_object> *serviceConnection;
- (void)handleXPCEvent:(id)arg1;
- (BOOL)connect;
- (id)init;

@end

// enum definition manually added
typedef NS_ENUM(unsigned long long, SimDeviceState) {
    SimDeviceStateCreating = 0,
    SimDeviceStateShutDown = 1,
    SimDeviceStateBooting = 2,
    SimDeviceStateBooted = 3,
    SimDeviceStateShuttingDown = 4
};


@interface SimDevice : NSObject <SimDeviceNotifier>

+ (id)simDevice:(NSString *)name
           UDID:(NSUUID *)udid
     deviceType:(SimDeviceType *)deviceType
        runtime:(SimRuntime *)runtime
          state:(unsigned long long)state
connectionManager:(SimServiceConnectionManager *)connectionManager
        setPath:(NSString *)path;

+ (id)simDeviceAtPath:(NSString *)path;

+ (id)createDeviceWithName:(NSString *)name
                   setPath:(NSString *)path
                deviceType:(SimDeviceType *)deviceType
                   runtime:(SimRuntime *)runtime;

+ (BOOL)isValidState:(unsigned long long)state;

@property(retain, nonatomic) NSDistantObject<SimBridge> *simBridgeDistantObject;
@property(retain, nonatomic) NSMachPort *simBridgePort;
@property(retain, nonatomic) NSMachPort *hostSupportPort;
@property(retain) NSMachPort *deathTriggerPort;
//@property(retain) NSObject<OS_dispatch_queue> *stateVariableQueue;
@property(retain) NSMutableDictionary *registeredServices;
//@property(retain) NSObject<OS_dispatch_queue> *bootstrapQueue;
@property(retain) SimDeviceNotificationManager *notificationManager;
@property(copy) NSString *setPath;
@property(retain) SimServiceConnectionManager *connectionManager;
@property(readonly) SimDeviceSet *deviceSet;
@property(copy) NSUUID *UDID;
@property(retain) SimRuntime *runtime;
@property(retain) SimDeviceType *deviceType;

- (BOOL)isAvailableWithError:(NSError **)error;
@property(readonly) BOOL available;
- (BOOL)triggerCloudSyncWithError:(NSError **)error;
- (void)triggerCloudSyncWithCompletionHandler:(CDUnknownBlockType)arg1;
- (BOOL)postDarwinNotification:(id)arg1 error:(id *)arg2;

- (pid_t)launchApplicationWithID:(NSString *)appId options:(NSDictionary *)options error:(NSError **)error;
- (void)launchApplicationAsyncWithID:(NSString *)appId options:(NSDictionary *)options completionHandler:(CDUnknownBlockType)arg3;
- (NSDictionary *)installedAppsWithError:(NSError **)error;
- (BOOL)applicationIsInstalled:(NSString *)appId type:(id *)arg2 error:(NSError **)error;
- (BOOL)uninstallApplication:(NSString *)appId withOptions:(id)arg2 error:(NSError **)error;
- (BOOL)installApplication:(NSURL *)appUrl withOptions:(NSDictionary *)options error:(NSError **)error;

- (BOOL)setKeyboardLanguage:(NSString *)lang error:(NSError **)error;
- (BOOL)addPhoto:(NSURL *)url error:(NSError **)error;
- (BOOL)openURL:(NSURL *)url error:(NSError **)error;

- (void)simBridgeSync:(CDUnknownBlockType)arg1;
- (void)simBridgeAsync:(CDUnknownBlockType)arg1;
- (void)simBridgeCommon:(CDUnknownBlockType)arg1;
- (long long)compare:(id)arg1;
- (id)newDeviceNotification;
- (id)createXPCNotification:(const char *)arg1;
- (id)createXPCRequest:(const char *)arg1;
- (void)handleXPCRequestSpawn:(id)arg1 peer:(id)arg2;
- (void)handleXPCRequestGetenv:(id)arg1 peer:(id)arg2;
- (void)handleXPCRequestLookup:(id)arg1 peer:(id)arg2;
- (void)handleXPCRequestRegister:(id)arg1 peer:(id)arg2;
- (void)handleXPCRequestRestore:(id)arg1 peer:(id)arg2;
- (void)handleXPCRequestUpdateUIWindow:(id)arg1 peer:(id)arg2;
- (void)handleXPCRequestErase:(id)arg1 peer:(id)arg2;
- (void)handleXPCRequestUpgrade:(id)arg1 peer:(id)arg2;
- (void)handleXPCRequestShutdown:(id)arg1 peer:(id)arg2;
- (void)handleXPCRequestBoot:(id)arg1 peer:(id)arg2;
- (void)handleXPCRequestRename:(id)arg1 peer:(id)arg2;
- (void)handleXPCRequest:(id)arg1 peer:(id)arg2;
- (void)handleXPCNotificationDeviceUIWindowPropertiesChanged:(id)arg1;
- (void)handleXPCNotificationDeviceRenamed:(id)arg1;
- (void)handleXPCNotificationDeviceStateChanged:(id)arg1;
- (void)handleXPCNotification:(id)arg1;

@property(copy) NSDictionary *uiWindowProperties;
- (void)setName:(NSString *)name;
@property(readonly, copy) NSString *name;
- (void)setState:(SimDeviceState)state;
@property(readonly) SimDeviceState state;
- (NSString*)stateString;

- (void)simulateMemoryWarning;
- (id)memoryWarningFilePath;
@property(readonly, copy) NSString *logPath;
- (NSString *)dataPath;
- (NSString *)devicePath;
- (NSDictionary *)environment;

- (int)_spawnFromSelfWithPath:(id)arg1 options:(id)arg2 terminationHandler:(CDUnknownBlockType)arg3 error:(id *)arg4;
- (int)_spawnFromLaunchdWithPath:(id)arg1 options:(id)arg2 terminationHandler:(CDUnknownBlockType)arg3 error:(id *)arg4;
- (int)spawnWithPath:(id)arg1 options:(id)arg2 terminationHandler:(CDUnknownBlockType)arg3 error:(id *)arg4;
- (void)spawnAsyncWithPath:(id)arg1 options:(id)arg2 terminationHandler:(CDUnknownBlockType)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (BOOL)registerPort:(unsigned int)arg1 service:(id)arg2 error:(id *)arg3;
- (unsigned int)lookup:(id)arg1 error:(id *)arg2;
- (unsigned int)_lookup:(id)arg1 error:(id *)arg2;

- (id)getenv:(id)arg1 error:(id *)arg2;

- (BOOL)restoreContentsAndSettingsFromDevice:(id)arg1 error:(id *)arg2;
- (void)restoreContentsAndSettingsAsyncFromDevice:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;

- (BOOL)updateUIWindowProperties:(id)arg1 error:(id *)arg2;
- (void)updateAsyncUIWindowProperties:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_sendUIWindowPropertiesToDevice;

- (BOOL)eraseContentsAndSettingsWithError:(id *)arg1;
- (void)eraseContentsAndSettingsAsyncWithCompletionHandler:(CDUnknownBlockType)arg1;

- (BOOL)upgradeToRuntime:(id)arg1 error:(id *)arg2;
- (void)upgradeAsyncToRuntime:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;

- (BOOL)rename:(id)arg1 error:(id *)arg2;
- (void)renameAsync:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;

- (BOOL)shutdownWithError:(NSError **)error;
- (BOOL)_shutdownWithError:(id *)arg1;
- (void)shutdownAsyncWithCompletionHandler:(void (^)(NSError *error))completionBlock;

- (BOOL)bootWithOptions:(NSDictionary *)options error:(NSError **)error;
- (void)bootAsyncWithOptions:(NSDictionary *)options completionHandler:(void (^)(NSError *error))completionBlock;

- (void)launchdDeathHandlerWithDeathPort:(id)arg1;
- (BOOL)startLaunchdWithDeathPort:(id)arg1 deathHandler:(CDUnknownBlockType)arg2 error:(id *)arg3;
- (void)registerPortsWithLaunchd;
@property(readonly) NSArray *launchDaemonsPaths;
- (BOOL)removeLaunchdJobWithError:(id *)arg1;
- (BOOL)createLaunchdJobWithError:(id *)arg1 extraEnvironment:(id)arg2 disabledJobs:(id)arg3;
- (BOOL)clearTmpWithError:(id *)arg1;
- (BOOL)ensureLogPathsWithError:(id *)arg1;
- (BOOL)supportsFeature:(id)arg1;
@property(readonly, copy) NSString *launchdJobName;
- (void)saveToDisk;
- (id)saveStateDict;
- (void)validateAndFixState;
@property(readonly, copy) NSString *descriptiveName;
- (NSString *)description;

- (id)initDevice:(NSString *)name
            UDID:(NSUUID *)udid
      deviceType:(SimDeviceType *)deviceType
         runtime:(SimRuntime *)runtime
           state:(unsigned long long)state
connectionManager:(SimServiceConnectionManager *)connectionManager
         setPath:(NSString *)path;

@end

@interface SimDeviceType : NSObject

+ (NSDictionary *)supportedDeviceTypesByName;  // returns [NSString : SimDeviceType]
+ (NSDictionary *)supportedDeviceTypesByAlias; // returns [NSString : SimDeviceType]
+ (NSDictionary *)supportedDeviceTypesByIdentifier;  // returns [NSString : SimDeviceType]
+ (NSArray *)supportedDeviceTypes;
+ (NSArray *)supportedDevices;

@property(copy) NSDictionary *supportedFeaturesConditionalOnRuntime;
@property(copy) NSDictionary *supportedFeatures;
@property(copy) NSDictionary *aliases;
@property(copy) NSDictionary *environment_extra;
@property(copy) NSString *productClass; // i.e. "N94"
@property(copy) NSString *springBoardConfigName;
@property unsigned int maxRuntimeVersion;
@property unsigned int minRuntimeVersion;
@property struct CGSize mainScreenDPI;
@property struct CGSize mainScreenSize;
@property(copy) NSDictionary *capabilities; // returns [NSString : NSDictionary]
@property float mainScreenScale;
@property(copy) NSArray *supportedProductFamilyIDs;
@property(copy) NSArray *supportedArchs;
@property(retain) NSBundle *bundle;
@property(copy) NSString *modelIdentifier;
@property(copy) NSString *identifier;
@property(copy) NSString *name;

- (Class)deviceClass;
- (long long)compare:(id)arg1;
- (BOOL)supportsFeatureConditionally:(id)arg1;
- (BOOL)supportsFeature:(id)arg1;
- (id)environmentForRuntime:(id)arg1;
- (NSDictionary *)environment; // [NSString : NSString]
@property(readonly, copy) NSString *productFamily;
@property(readonly) int productFamilyID;
- (NSString *)description;

- (id)initWithBundle:(NSBundle *)bundle;
- (id)initWithPath:(NSString *)path;
- (id)init;

@end

@interface SimDeviceSet : NSObject <SimDeviceNotifier>

+ (void)resubscribeAllToNotifications;
+ (SimDeviceSet *)setForSetPath:(NSString *)path;
+ (SimDeviceSet *)defaultSet;
+ (NSString *)defaultSetPath;

@property(retain) SimDeviceNotificationManager *notificationManager;
@property(retain) SimServiceConnectionManager *connectionManager;
@property(retain) NSMutableDictionary *devicesNotificationRegIDs;
@property(retain) NSMutableDictionary *_devicesByUDID;
//@property(retain) NSObject<OS_dispatch_queue> *devicesQueue;
@property(copy) NSString *setPath;

- (void)handleXPCRequestDeleteDevice:(id)arg1 peer:(id)arg2 device:(id)arg3;
- (void)handleXPCRequestCreateDevice:(id)arg1 peer:(id)arg2;
- (void)handleXPCRequest:(id)arg1 peer:(id)arg2;
- (void)handleXPCNotificationDeviceRemoved:(id)arg1;
- (void)handleXPCNotificationDeviceAdded:(id)arg1;
- (void)handleXPCNotification:(id)arg1;
- (BOOL)deleteDevice:(id)arg1 error:(id *)arg2;
- (void)deleteDeviceAsync:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;

- (SimDevice *)createDeviceWithType:(SimDeviceType *)deviceType
                            runtime:(SimRuntime *)runtime
                               name:(NSString *)name
                              error:(NSError **)error;
- (void)createDeviceAsyncWithType:(SimDeviceType *)deviceType
                          runtime:(SimRuntime *)runtime
                             name:(NSString *)name
                completionHandler:(CDUnknownBlockType)arg4;

- (void)removeDeviceAsync:(id)arg1;
- (void)addDevice:(id)arg1;
- (void)addDeviceAsync:(id)arg1;
- (void)updateDefaultDevices;
- (id)defaultCreatedPlistPath;
@property(readonly, copy) NSArray *availableDevices;
@property(readonly, copy) NSArray *devices;
@property(readonly, copy) NSDictionary *devicesByUDID;
- (NSString *)description;

- (id)initWithSetPath:(NSString *)path;
- (BOOL)subscribeToNotificationsWithError:(id *)arg1;

@end

@interface SimRuntime : NSObject

+ (NSDictionary *)supportedRuntimesByAlias; // returns [NSString : SimRuntime]
+ (NSDictionary *)supportedRuntimesByIdentifier;  // returns [NSString : SimRuntime]
+ (NSArray *)supportedRuntimes; // array of SimRuntime*

@property unsigned int maxHostVersion;
@property unsigned int minHostVersion;
@property(copy) NSDictionary *aliases;
@property(nonatomic) void *libLaunchHostHandle;
@property(copy) NSDictionary *environment_extra;
@property(copy) NSArray *supportedProductFamilyIDs;
@property(copy) NSString *platformPath;
@property(copy) NSDictionary *requiredHostServices;
@property(copy) NSDictionary *supportedFeaturesConditionalOnDeviceType;
@property(copy) NSDictionary *supportedFeatures;
@property unsigned int version;
@property(copy) NSString *buildVersionString;
@property(copy) NSString *versionString;
@property(copy) NSString *root;
@property(retain) NSBundle *bundle;
@property(copy) NSString *identifier;
@property(copy) NSString *name;

- (NSString *)platformRuntimeOverlay;

- (CDUnknownFunctionPointerType)launch_sim_set_death_handler;
- (CDUnknownFunctionPointerType)launch_sim_waitpid;
- (CDUnknownFunctionPointerType)launch_sim_spawn;
- (CDUnknownFunctionPointerType)launch_sim_getenv;
- (CDUnknownFunctionPointerType)launch_sim_bind_session_to_port;
- (CDUnknownFunctionPointerType)launch_sim_find_endpoint;
- (CDUnknownFunctionPointerType)launch_sim_register_endpoint;

- (BOOL)isAvailableWithError:(NSError **)error;
@property(readonly) BOOL available;
- (BOOL)verifyRuntime;
- (NSString *)dyld_simPath;
- (BOOL)createInitialContentPath:(NSString *)path error:(NSError **)error;
- (void)createInitialContentPath:(NSString *)path;
- (NSString *)sampleContentPath;
- (long long)compare:(SimRuntime *)runtime;
- (BOOL)supportsFeatureConditionally:(id)arg1;
- (BOOL)supportsFeature:(id)arg1;
- (BOOL)supportsDeviceType:(SimDeviceType *)deviceType;
- (BOOL)supportsDevice:(SimDeviceType *)deviceType;
- (NSDictionary *)environment;
- (NSString *)description;

- (id)initWithBundle:(NSBundle *)bundle;
- (id)initWithPath:(NSString *)path;
- (id)init;

@end

@interface NSUserDefaults (SimDefaults)
+ (id)simulatorDefaults;
@end

@interface NSError (SimError)
+ (id)errorFromXPCDict:(id)arg1;
+ (id)errorWithLaunchdError:(int)arg1 userInfo:(id)arg2;
+ (id)errorWithLaunchdError:(int)arg1 localizedDescription:(id)arg2;
+ (id)errorWithLaunchdError:(int)arg1;
+ (id)errorWithSimErrno:(int)arg1 localizedDescription:(id)arg2;
+ (id)errorWithSimErrno:(int)arg1 userInfo:(id)arg2;
+ (id)errorWithSimErrno:(int)arg1;
- (id)xpcDict;
@end
